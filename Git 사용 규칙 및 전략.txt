1. main 브랜치는 건들지 않기(개인작업은 각자의 브랜치로)
2. main 브랜치는 항상 배포가능한 상태를 유지
====================================
git 이용 프로세스
1. 원격 저장소를 clone해서 자신의 로컬저장소로 가져오기
2. 로컬저장소에서 main 브랜치를 기준으로 개인작업 브랜치 나누기
3. 개인작업 브랜치에 체크아웃한 상태로 작업하기(커밋은 최대한 자주 하기)
4. 해당 작업이 오류없이 마무리되면 main브랜치로 push하기
5. main브랜치로 checkout한뒤에 pull에 신규 업데이트 내용이 없으면 브랜치 병합 기능으로 완료한 개인작업 이력을 클릭해 병합하기
6. 안전하게 병합이 마무리되면 main브랜치에서 push해 원격저장소로 올리기

======================================== 브랜칭 전략
주 브랜치 유지: main(또는 master) 브랜치는 항상 배포 가능한 상태를 유지해야 합니다.
기능 브랜치 사용: 새로운 기능, 버그 수정, 개선 작업 등을 위해 별도의 브랜치를 생성합니다. 예를 들어, feature/로그인기능, bugfix/로그인오류와 같은 이름을 사용할 수 있습니다.
명확한 브랜치 이름: 브랜치 이름은 해당 브랜치의 목적을 명확히 설명하도록 합니다. 예를 들어, feature/새로운-기능, hotfix/중요-버그-수정 등.
========================================
3. 정기적인 동기화
주기적인 Pull: 원격 저장소에서 변경 사항을 자주 Pull하여 로컬 브랜치와 동기화 상태를 유지합니다.
Push 전에 Pull: 변경 사항을 Push하기 전에 원격 저장소의 최신 변경 사항을 Pull하여 충돌을 방지합니다.
=====================================
4. 충돌 해결
충돌 사전 예방: 자주 Pull하고, 브랜치가 오래된 경우에는 적절히 Rebase하거나 Merge하여 충돌 가능성을 줄입니다.
충돌 해결 시 협의: 충돌이 발생했을 때는 팀원과 협의하여 적절한 해결 방안을 찾습니다.
=======================================
